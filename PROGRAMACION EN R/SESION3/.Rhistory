library(tinytex)
library(knitr)
library(rmarkdown)
library(knitr)
library()
tinytex::install_tinytex()
y
library(help = datasets)
data("airquality")
force(airquality)
str(airquality)
airquality[,2]
airquality$Solar.R
data("WWWusage")
force(WWWusage)
library(ISLR2)
library(help=ISLR2)
vuelos2013 <- read.csv("https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/nycflights13.csv")
#### Configuracion inicial ####
#
# Configuracion del directorio de trabajo
setwd("C:/Users/EQUIPO/Desktop/CTIC/PROGRAMACION EN R/SESION2")
# Limpiemos la memoria ram
rm(list = ls())
# Cargamos el dataset
# https://www.datosabiertos.gob.pe/dataset/alumnos-matriculados
UNI <- read.csv("Matriculados_2016_al_2022.csv")
#### Preprocesamiento ####
# Nombre de cada columnas
NombreVars <- colnames(UNI)
# Dimensiones del dataset
dim(UNI)
nrow(UNI)
ncol(UNI)
# Valores Faltantes / MIssing values por columna
colSums(is.na(UNI))
Los posibles valores de la columna Año.Matricula
year2k16 <- UNI[UNI$Año.Matrícula == 2016, ]
nrow(UNI[UNI$Año.Matrícula == 2017, ])
nrow(UNI[UNI$Año.Matrícula == 2018, ])
NumMatriculados <- c()
for(year in unique(UNI$Año.Matrícula)){
print(paste("Año procesado : ", year))
NumMatriculados <- c(NumMatriculados, nrow(UNI[UNI$Año.Matrícula == year,]))
}
NumMatriculados
NumMatriculados_df <- data.frame(Año =unique(UNI$Año.Matrícula),
NumMat = NumMatriculados)
View(NumMatriculados_df)
# Funcion tabla
table(UNI$Nacionalidad)
table(UNI[UNI$Año.Matrícula == 2016,]$Nacionalidad)
table(UNI[UNI$Año.Matrícula == 2022,]$Nacionalidad)
#### Configuraciones iniciales ####
rm(list = ls())
setwd("C:/Users/EQUIPO/Desktop/CTIC/PROGRAMACION EN R/SESION3")
a <- as.integer(runif(1,14,20))
a
a
a <- as.integer(runif(1,14,20))
a
if(a >= 17){
categoria <- "A"
}
print(a)
print(categoria)
help(runif)
# Estructura algo mas general del if : if-else
if(4>5){
"False"
}else{
"verdadero"
}
notas <- as.integer(runif(50,0,20))
Promedio <- mean(notas)
if (Promedio > 14){
MenoresNotas = sort(notas)[1:10] + 0.5
MenoresNotas
}else{
notas <- notas + 0.7
notas
}
Promedio
Notas2 <- as.integer(runif(100,0,40))
Notas2
DataParidad <- ifelse( Notas2 %% 2 == 0, "A", "B")
DataParidad
for (lanzamiento in 1:10){
print(as.integer(runif(1,1,6)))
}
Apuestas <- c()
for (lanzamiento in 1:10){
l <- as.integer(runif(1,1,6))
print(l)
Apuestas <- c(Apuestas, l)
}
Apuestas
Matriz_Apuestas <- matrix(ncol = 10)
Matriz_Apuestas
Matriz_Apuestas[1,1]
Matriz_Apuestas[0,1]
help(rbind)
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)[, c(1, 3, 2)]
m
m <- cbind(1, 1:7)
m
m <- cbind(m, 8:14)
m
m <- cbind(m, 8:14)[, c(1, 3, 2)]
m
rm(m)
# una apuestas )
for (fila in 1:200){
# pra cada una de esas filas : iterador fila
# generar un vector de apuestas
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
}
# Una vez generado el veector de apuestas
# Vamos llenando la fila a fila la matriz de apuestas
Matriz_Apuestas <- rbind(Matriz_Apuestas, apuesta)
}
Matriz_Apuestas
View(Matriz_Apuestas)
apuesta
as.integer(runif(1,1,6))
apuestas
matrix(1:200, ncol = 10)
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
print("esto es apuestas: " apuestas)
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
print("esto es apuestas: " apuestas)
rm(lista = ls())
rm(list = ls())
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
print("esto es apuestas: " apuestas)
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
apuestas
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
apuesta
}
apuestas
apuesta
for (lanzamiento in 1:10){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
apuestas
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
apuesta
}
apuestas
apuesta
for (lanzamiento in 1:5){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
apuestas
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
apuesta
}
apuestas
apuesta
rm(list = ls())
setwd("C:/Users/EQUIPO/Desktop/CTIC/PROGRAMACION EN R/SESION3")
a <- as.integer(runif(1,14,20))
# Sobre el valor generado aleatoriamente vamos a evaluar una condicion
if(a >= 17){
categoria <- "A"
}
print(a)
print(categoria)
# Creamos el vector de notas
notas <- as.integer(runif(50,0,20))
Promedio <- mean(notas)
if (Promedio > 14){
MenoresNotas = sort(notas)[1:10] + 0.5
MenoresNotas
}else{
notas <- notas + 0.7
notas
}
Notas2 <- as.integer(runif(100,0,40))
Notas2
DataParidad <- ifelse( Notas2 %% 2 == 0, "A", "B")
for (lanzamiento in 1:10){
print(as.integer(runif(1,1,6)))
}
Apuestas <- c()
for (lanzamiento in 1:10){
l <- as.integer(runif(1,1,6))
print(l)
Apuestas <- c(Apuestas, l)
}
Apuestas
Matriz_Apuestas <- matrix(ncol = 10)
Matriz_Apuestas
for (fila in 1:200){
# pra cada una de esas filas : iterador fila
# generar un vector de apuestas
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
apuestas
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
apuesta
}
# Una vez generado el veector de apuestas
# Vamos llenando la fila a fila la matriz de apuestas
Matriz_Apuestas <- rbind(Matriz_Apuestas, apuesta)
}
Matriz_Apuestas
for (i in 1:3) {
for (j in 4) {
p=  i + j
}
}
p
for (i in 1:3) {
for (j in 1:4) {
p=  i + j
}
}
p
rm(i)
rm(j)
rm(p)
for (i in 1:3) {
for (j in 1:4) {
p = i +j
print(p)
}
}
rm(j)
rm(i)
rm(p)
for (fila in 1:200){
# pra cada una de esas filas : iterador fila
# generar un vector de apuestas
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
print(apuestas)
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
print(apuesta)
}
# Una vez generado el veector de apuestas
# Vamos llenando la fila a fila la matriz de apuestas
Matriz_Apuestas <- rbind(Matriz_Apuestas, apuesta)
}
View(Matriz_Apuestas)
View(Matriz_Apuestas)
rm(list = ls())
setwd("C:/Users/EQUIPO/Desktop/CTIC/PROGRAMACION EN R/SESION3")
a <- as.integer(runif(1,14,20))
# Sobre el valor generado aleatoriamente vamos a evaluar una condicion
if(a >= 17){
categoria <- "A"
}
print(a)
print(categoria)
help(runif)
# Estructura algo mas general del if : if-else
if(4>5){
"False"
}else{
"verdadero"
}
# Ejemplito :
# Generemos un total de 50 notas aleatorias con distribucion uniforme en el
# intervalo de [0,20]. Si el promedio de estas notas es mayor que 14}
# entonces que las 10 menores notas se le sume 0.5. Si el promedio des tas notas
# no es mayor a 14 que a todos se les sume 0.7
# Creamos el vector de notas
notas <- as.integer(runif(50,0,20))
Promedio <- mean(notas)
if (Promedio > 14){
MenoresNotas = sort(notas)[1:10] + 0.5
MenoresNotas
}else{
notas <- notas + 0.7
notas
}
# Estructura ifelse
#
# Ejemplito : Generemos 80 notas, binaricemos estas notas con el siguiente
# Si nota >14 : Asignamos el valor de "A"
# Si la nota <= 14 : asignaremos al valor de
#
Notas2 <- as.integer(runif(100,0,40))
Notas2
DataParidad <- ifelse( Notas2 %% 2 == 0, "A", "B")
#### Estructura de repeticion for ####
# La estructura for : nos permite ejecutar un bucle, de manera que se realiza
# una operacion por cada elemento
# for(elemento in vector){
#   operacion_sobre_elemento
# }
# Simulemos 10 lanzamientos de un dado
for (lanzamiento in 1:10){
print(as.integer(runif(1,1,6)))
}
# Deseo guardar los resultados de la simulacion de mi codigo anterior
# es decir, cada vez que simulo un lanzamiento, lo guardo en un vector
Apuestas <- c()
for (lanzamiento in 1:10){
l <- as.integer(runif(1,1,6))
print(l)
Apuestas <- c(Apuestas, l)
}
Apuestas
Matriz_Apuestas <- matrix(ncol = 10)
Matriz_Apuestas
for (fila in 1:200){
# pra cada una de esas filas : iterador fila
# generar un vector de apuestas
for (lanzamiento in 1:200){
apuestas <- c()
l <- as.integer(runif(1,1,6))
apuestas <- c(apuestas, l)
print(apuestas)
#
# Generemos un vector fila con 10 columnas
apuesta <- matrix(apuestas, ncol = 10)
print(apuesta)
}
# Una vez generado el veector de apuestas
# Vamos llenando la fila a fila la matriz de apuestas
Matriz_Apuestas <- rbind(Matriz_Apuestas, apuesta)
}
View(Matriz_Apuestas)
inicio <- 0
final <- 5
while(inicio<final){
print("aun no sellega a final")
inicio <- inicio + 1
}
# generemos numeros aleatorios en [0,20] hasta que salga un 20
nota <- 0
numveces <- 0
while(nota!=20){
numveces=numveces +1
nota <- as.integer(runif(1,0,21))
print(nota)
}
numveces
for (i in 1:10) {
if(i == 7){
break
}
print(i)
}
for(t in 111:666){
if(t == 222 | t == 333 | t == 444 | t == 555){
next
}
print(t)
}
CreadorJugadasT <- function(NumJugadas){
NumJugadas <- NumJugadas + 1
# Generemos NumJugadas con numeros de 1 al 40
MatrizT <- matrix(ncol = 6)
for (jugada in 1:NumJugadas) {
# Construir una apuesta
apuestaT <- as.integer(runif(6,1,40))
MatrizT <- rbind(MatrizT, apuestaT)
}
# Limpiamos la primera fila de NA
MatrizT <- MatrizT[2:NumJugadas, 1:6]
# Renombrar las dimensiones de la matriz
#
# Construyaños un vector para el nombre de las filas
VectorNombrefilas <- c()
for (fila in 1:nrow(MatrizT)) {
VectorNombrefilas <- c(VectorNombrefilas, paste("Apuesta", fila, sep = "-"))
}
# Asignamos VectorNombrefilas al rownames de MatrizT
rownames(MatrizT) <- VectorNombrefilas
# De manera naloga construyo un vector con los nombres de las columnas
VectorNombreColumnas <- c()
for (b in 1:ncol(MatrizT)) {
VectorNombreColumnas <- c(VectorNombreColumnas, paste("Bola", b, sep="-"))
}
# Asignamos el VectorNombreColumnas al colnames de MatrizT
colnames(MatrizT) <- VectorNombreColumnas
return (MatrizT)
}
CreadorJugadasT(10)
library(tidyverse)
library(help = "ggplot2")
data(package = "ggplot2")
x1 <- mean(rnorm(120,mean = 12.5, sd = 9.81))
x1
x2 <- tanh(x1)
x2
round(x2, digits = 4)
rnorm(120,mean=12.5,sd=9.81) %>%
# Calculamos la media de este vecotr
mean() %>%
# Calculamos la tangente hiperbolica
tanh() %>%
# redondeamos
round(digits = 4)
round(tanh(mean(rnorm(120,mean = 12.5, sd = 9.81))), digits = 4)
library(gapminder)
data("gapminder")
View(gapminder)
class(gapminder)
gapminderDF <- as.data.frame(gapminder)
gapminderDF
View(gapminderDF)
colnames(gapminder)
help("gapminder")
Americas1997 <- gaminder %>%
# filtrar la columnda continente : "Americas"
filter(continent == "Americas") %>%
# Filtremos los datos que corresponden al año 1997
filter(year == 1997)
Americas1997 <- gaminder %>%
# filtrar la columnda continente : "Americas"
filter(continent == "Americas") %>%
# Filtremos los datos que corresponden al año 1997
filter(year == 1997)
Americas1997 <- gapminder %>%
# filtrar la columnda continente : "Americas"
filter(continent == "Americas") %>%
# Filtremos los datos que corresponden al año 1997
filter(year == 1997)
View(Americas1997)
EuropeAsia <- gapminder %>%
filter(continent %in% c("Europe","Asia")) %>%
filter(year == 1997)
View(EuropeAsia)
library(help = gapminder)
gapminder %>%
filter(continent == "Oceania") %>%
filter(year > 2000) %>%
arrange(country)
gapminder %>%
filter(continent == "Oceania") %>%
filter(year > 2000) %>%
arrange(desc(year))
gapminder <- rename(gapminder, pais = country)
colnames(gapminder)
#
gapminder <- rename(gapminder, continente = continent,
año = year,
esp_vida = lifeExp,
poblacion = pop,
pbi_per_cap = gdpPercap)
colnames(gapminder)
gapminder <- relocate(gapminder, pbi_per_cap)
colnames(gapminder)
gapminder <- relocate(gapminder, pbi_per_cap, .before = año)
colnames(gapminder)
df1 <- select(.data = gapminder, pais, año, poblacion)
df1
df2 <- gapminder %>%
select(pais,año,poblacion)
df2
df3 <- df2  %>%
filter(año > 2000)
df3
library(nycflights13)
VuelosNY <- nycflights13::flights
View(VuelosNY)
library(help = nycflights13)
# Nombres de la columnas
colnames(VuelosNY)
unique(VuelosNY$year)
# Filtremos los datos de marzo (month == 3)
VuelosNY %>%
filter(month == 3)
