library(tinytex)
library(knitr)
library(rmarkdown)
library(knitr)
library()
tinytex::install_tinytex()
y
library(help = datasets)
data("airquality")
force(airquality)
str(airquality)
airquality[,2]
airquality$Solar.R
data("WWWusage")
force(WWWusage)
library(ISLR2)
library(help=ISLR2)
vuelos2013 <- read.csv("https://raw.githubusercontent.com/robintux/Datasets4StackOverFlowQuestions/master/nycflights13.csv")
setwd("C:/Users/azamudio/Desktop/Programacion_R/Sesion4")
# Cargamos librerias
library(tidyverse)
library(car)
# Datos
data("Salaries")
help("Salaries")
install.packages("car")
# Cargamos librerias
library(tidyverse)
library(car)
library(car)
library(tidyverse)
data("Salaries")
help("Salaries")
p <- ggplot(data = Salaries,mapping = aes(x = yrs.service,y =salary))
class(p)
p
p + geom_point()
q <- ggplot(data = Salaries, mapping = aes(x = yrs.since.phd,
y = salary))
y = salary))
class(q)
q + geom_point()
q + geom_point(shape = "diamond", size = 3.5)
help(geom_point)
q + geom_point(shape = 5, size = 3.5)
q + geom_point(shape = 24, size = 3.5, fill = "red")
q + geom_point(shape = 24, size = 3.5, fill = "#17235F")
p + geom_point(aes(shape = sex), size = 3)
q + geom_point(aes(shape = rank), size = 3.3)
p +
# Deseo que la forma del caracter de cada par ordenado y el
# color de cada ordenado dependan de la variable sex
geom_point(aes(shape = sex, col = sex), size = 2.5) +
p
p +
# Deseo que la forma del caracter de cada par ordenado y el
# color de cada ordenado dependan de la variable sex
geom_point(aes(shape = sex, col = sex), size = 2.5)
p +
# Deseo que la forma del caracter de cada par ordenado y el
# color de cada ordenado dependan de la variable sex
geom_point(aes(shape = sex, col = sex), size = 5)
p +
# Deseo que la forma del caracter de cada par ordenado y el
# color de cada ordenado dependan de la variable sex
geom_point(aes(shape = sex, col = sex), size = 2.5) +
# Deseo modificar/personalizar la forma/shape y el color de cada
# par ordenado de mi capa geometrica
# scale_shape_manual(values = c(3,4))+
scale_shape_manual(values = c(0,1))+
scale_color_manual(values = c("blue", "orange"))
p +
# Deseo que la forma del caracter de cada par ordenado y el
# color de cada ordenado dependan de la variable sex
geom_point(aes(shape = sex, col = sex), size = 2.5) +
# Deseo modificar/personalizar la forma/shape y el color de cada
# par ordenado de mi capa geometrica
# scale_shape_manual(values = c(3,4))+
scale_shape_manual(values = c(0,1))+
scale_color_manual(values = c("blue", "orange"))+
# La capa theme
theme(legend.position = c(0.9,0.95))+
theme(legend.direction = "horizontal")
plt1 <- p +
# Deseo que la forma del caracter de cada par ordenado y el
# color de cada ordenado dependan de la variable sex
geom_point(aes(shape = sex, col = sex), size = 2.5) +
# Deseo modificar/personalizar la forma/shape y el color de cada
# par ordenado de mi capa geometrica
# scale_shape_manual(values = c(3,4))+
scale_shape_manual(values = c(0,1))+
scale_color_manual(values = c("blue", "orange"))+
# La capa theme
theme(legend.position = c(0.9,0.95))+
theme(legend.direction = "horizontal")
library(ggthemes)
library(help = ggthemes)
plt2 <- p +
geom_point(aes(shape = sex, col = sex), size = 2.5)+
theme_gdocs()
plt2
plt3 <- p +
geom_point(aes(shape = sex, col = sex), size = 2.5)+
theme_excel_new()
plt3
plt4 <- p +
geom_point(aes(shape = sex, col = sex), size = 2.5)+
theme_stata()
plt4
p +
geom_point(aes(shape = sex, color = rank ))+
# Personalicemos los caracteres que usamos en cada
# par ordenado
scale_shape_manual(values = c(3,5))+
# Modifiquemos el color de cada par ordenado
scale_color_manual(values = c("yellow", "green", "blue"))
p +
geom_point(aes(shape = sex, color = rank ))+
# Personalicemos los caracteres que usamos en cada
# par ordenado
scale_shape_manual(values = c(3,5))+
# Modifiquemos el color de cada par ordenado
scale_color_manual(values = c("yellow", "green", "blue"))+
# Modifiquemos la forma de presentar los valores del eje-Y
scale_y_continuous(labels = scales::scientific)
p +
geom_point(aes(shape = sex, color = rank ))+
# Personalicemos los caracteres que usamos en cada
# par ordenado
scale_shape_manual(values = c(3,5))+
# Modifiquemos el color de cada par ordenado
scale_color_manual(values = c("yellow", "green", "blue"))+
# Modifiquemos la forma de presentar los valores del eje-Y
scale_y_continuous(labels = scales::scientific)+
# Agreguemos etiquetas
labs(title = "Salarios : Ambito Academico",
subtitle = "Dataset : Salaries",
x = "A単os de Servicio",
y = "Salarios [USD]",
caption = "Clase 4 (PIT2023)")
p +
geom_point(aes(shape = sex, color = rank ))+
# Personalicemos los caracteres que usamos en cada
# par ordenado
scale_shape_manual(values = c(3,5))+
# Modifiquemos el color de cada par ordenado
scale_color_manual(values = c("yellow", "green", "blue"))+
# Modifiquemos la forma de presentar los valores del eje-Y
scale_y_continuous(labels = scales::scientific)+
# Agreguemos etiquetas
labs(title = "Salarios : Ambito Academico",
subtitle = "Dataset : Salaries",
x = "A単os de Servicio",
y = "Salarios [USD]",
caption = "Clase 4 (PIT2023)")+
# Deseo agregar un texto al grafico
annotate(geom = "text",
x = 30, y = 225000,label = "Library(car)")
PlotLabels_p <- p +
geom_point(aes(shape = sex, color = rank ))+
# Personalicemos los caracteres que usamos en cada
# par ordenado
scale_shape_manual(values = c(3,5))+
# Modifiquemos el color de cada par ordenado
scale_color_manual(values = c("yellow", "green", "blue"))+
# Modifiquemos la forma de presentar los valores del eje-Y
scale_y_continuous(labels = scales::scientific)+
# Agreguemos etiquetas
labs(title = "Salarios : Ambito Academico",
subtitle = "Dataset : Salaries",
x = "A単os de Servicio",
y = "Salarios [USD]",
caption = "Clase 4 (PIT2023)")+
# Deseo agregar un texto al grafico
annotate(geom = "text",
x = 30, y = 225000,label = "Library(car)")
PlotLabels_q <- q +
geom_point(aes(shape = sex, color = rank ))
PlotLabels_q
PlotLabels_q <- q +
geom_point(aes(shape = sex, color = rank ))+
# Personalicemos los caracteres que usamos en cada
# par ordenado
scale_shape_manual(values = c(3,5))+
# Modifiquemos el color de cada par ordenado
scale_color_manual(values = c("yellow", "green", "blue"))+
# Modifiquemos la forma de presentar los valores del eje-Y
scale_y_continuous(labels = scales::scientific)+
# Agreguemos etiquetas
labs(title = "Salarios : Ambito Academico",
subtitle = "Dataset : Salaries",
x = "A単os desde el PHD",
y = "Salarios [USD]",
caption = "Clase 4 (PIT2023)")+
# Deseo agregar un texto al grafico
annotate(geom = "text",
x = 30, y = 225000,label = "Library(car)")
PlotLabels_q
PlotLabels_p +
# Agregamos una linea de tendencia no parametrica
geom_smooth()
PlotLabels_p +
geom_smooth(method = "lm",
formula = y ~ poly(x,2))
PlotLabels_p +
geom_smooth(method = "lm",
formula = y ~ poly(x,1))+
facet_grid(~sex)
PlotLabels_p +
geom_smooth(method = "lm",
formula = y ~ poly(x,1))+
facet_grid(~rank)
PlotLabels_p +
geom_smooth(method = "lm",
formula = y ~ poly(x,1),
# Modifiquemos el color de la recta de
# regresion
color = "black",
# Eliminemos el intervalo de confianza
# asociado a la regresion
se = FALSE
)+
facet_grid(~discipline)
View(Salaries)
PlotLabels_p +
geom_smooth(method = "lm",
formula = y ~ poly(x,1),
# Modifiquemos el color de la recta de
# regresion
color = "black",
# Eliminemos el intervalo de confianza
# asociado a la regresion
#se = FALSE
)+
facet_grid(~discipline)
PlotLabels_p +
geom_smooth(method = "lm",
formula = y ~ poly(x,1),
# Modifiquemos el color de la recta de
# regresion
color = "black",
# Eliminemos el intervalo de confianza
# asociado a la regresion
se = FALSE
)+
facet_grid(~discipline)
CapaBaseSex <- ggplot(data = Salaries,
mapping = aes(x = sex))
CapaBaseSex
CapaBaseSex + geom_bar()
Bar_rank <- ggplot(data = Salaries, mapping = aes(x = rank))+
geom_bar()
Bar_rank
# rank
Bar_rank <- ggplot(data = Salaries, mapping = aes(x = rank))+
geom_bar()
Hist_service <- ggplot(data = Salaries, mapping = aes(yrs.service))+
geom_histogram()
Hist_service
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
g1 <- PlotLabels_q
g2 <- Bar_rank +
labs(title = "Diagrama de barras : rank")
g2
g2 <- Bar_rank +
labs(title = "Diagrama de barras : rank")
g3 <- Hist_service +
labs(title = "Histograma : yrs.service")
rm(list = ls())
#### COnfiguraciones iniciales ####
rm(list = ls())
setwd("C:/Users/azamudio/Desktop/Programacion_R/Sesion5")
#### COnfiguraciones iniciales ####
rm(list = ls())
setwd("C:/Users/EQUIPO/Desktop/CTIC/PROGRAMACION EN R/SESION5")
library(tidyverse)
df <- read.csv("Pesos_Bebe_Meses.csv")
ggplot(data = df,mapping = aes(x = Edad, y = Peso))+
geom_point()+
geom_smooth(method = "lm")
modelo <- lm(formula = Edad ~ Peso, data = df)
modelo
summary(modelo)
#### Configuraciones iniciales ####
rm(list = ls())
setwd("C:/Users/EQUIPO/Desktop/CTIC/PROGRAMACION EN R/SESION5")
library(tidyverse)
creditdata <- read.table("german.data", stringsAsFactors = TRUE)
View(creditdata)
# Coloquemos nombres a las variables/columnas
colnames(creditdata) <- c("account.status",
"months",
"credit.history",
"purpose",
"credit.amount",
"savings",
"employment",
"installment.date",
"personal.status",
"guarantors",
"residence",
"property",
"age",
"other.installments",
"housing",
"credit.cards",
"jobs",
"dependents",
"phone",
"foreign.worker",
"credit.rating")
View(creditdata)
creditdata$credit.rating <- ifelse(creditdata$credit.rating == 1, 1, 0)
table(creditdata$credit.rating)
#### Primer modelo de regresion logistica ####
# Variable dependiente : credit.rating
# modelo1 : utilicemos solo variables cuantitativas
modelo1 <- glm(formula = credit.rating ~  months + credit.amount + installment.date +
residence + age + credit.cards + dependents,
data = creditdata,
family = binomial)
# Veamos un resumen de los campos del objeto modelo1
summary(modelo1)
# Filtremos las variables que tienen un p-value por debajo del umbral 0.05
Var_pvalue <- summary(modelo1)$coeff[,4] < 0.05
Var1 <- names(Var_pvalue)[Var_pvalue == TRUE]
# Construir la formula para un nuevoo modelo considerando solo las variables
# estadisticamente significativas (pvalue < 0.05)
# Sea fx la formula a construir
#
listaVarSig <- c()
#
fx <- "credit.rating ~"
#
for(index in 1:length(Var1)){
if(Var1[index] != "(Intercept)"){
# Construimos el vector de variables significativas
listaVarSig <- c(listaVarSig, Var1[index])
if (fx == "credit.rating ~"){
fx <- paste(fx , Var1[index], sep =" ")
}
else {
fx <- paste(fx , Var1[index], sep = "+")
}
}
}
# Filtremos el dataframe de datos, considerando solo las variables que se
# encuentren en listaVarsig
creditdataVarSig <- creditdata %>%
select(all_of(listaVarSig)) %>%
mutate(credit.rating= creditdata$credit.rating)
# Construyamos un segundo modelo de regresion logistica
modelo2 <- glm(formula = fx,
data = creditdataVarSig,
family = binomial)
# Resumen del modelo
summary(modelo2)
Indextest <- sample(1:nrow(creditdataVarSig), 0.15*nrow(creditdataVarSig))
Indextest
test <- creditdataVarSig[Indextest, ]
test
pronostico <- predict.glm(modelo2, newdata = test[, -5], type = "response")
pronostico
range(pronostico)
# Binaricemos la variable pronostico
predicciones <- floor(pronostico + 0.6)
range(pronostico)
predicciones <- floor(pronostico + 0.6)
unique(predicciones)
predicciones
table(predicciones)
# Matriz de confusion
table(test$credit.rating , predicciones)
